# Assignment 1: Design Your Own Class

class Smartphone:
    def __init__(self, brand, model, price):
        self.brand = brand
        self.model = model
        self.price = price

    def call(self, number):
        print(f"Dialing {number} from {self.brand} {self.model}...")

    def show_info(self):
        print(f"Smartphone Info: Brand: {self.brand}, Model: {self.model}, Price: ${self.price}")

class Smartwatch(Smartphone):  # Inheritance layer
    def __init__(self, brand, model, price, fitness_tracker):
        super().__init__(brand, model, price)
        self.fitness_tracker = fitness_tracker

    def track_steps(self, steps):
        print(f"Tracking {steps} steps using {self.brand} {self.model}.")

# Create objects and demonstrate encapsulation and inheritance
phone = Smartphone("Apple", "iPhone 14", 999)
phone.show_info()
phone.call("123-456-7890")

watch = Smartwatch("Samsung", "Galaxy Watch 6", 399, True)
watch.show_info()
watch.track_steps(10000)

# Activity 2: Polymorphism Challenge
class Animal:
    def move(self):
        print("This animal moves in its own way.")

class Dog(Animal):
    def move(self):
        print("The dog runs.")

class Bird(Animal):
    def move(self):
        print("The bird flies.")

class Fish(Animal):
    def move(self):
        print("The fish swims.")

# Demonstrate polymorphism
animals = [Dog(), Bird(), Fish()]
for animal in animals:
    animal.move()

