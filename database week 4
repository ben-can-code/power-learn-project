Customer Analysis - Using Bills Table
1. Identify the top 5 customers with the highest total bill amount
sql
Copy code
SELECT 
    customerID, 
    SUM(totalAmount) AS totalBillAmount
FROM Bills
GROUP BY customerID
ORDER BY totalBillAmount DESC
LIMIT 5;
2. Determine the average time taken to pay a bill for each customer
Assuming the Bills table has billDate (when the bill was generated) and paymentDate (when it was paid):

sql
Copy code
SELECT 
    customerID, 
    AVG(DATEDIFF(paymentDate, billDate)) AS avgTimeToPay
FROM Bills
WHERE paymentDate IS NOT NULL
GROUP BY customerID;
3. Find customers who have never made a late payment
Assuming dueDate represents the deadline for payment:

sql
Copy code
SELECT DISTINCT customerID
FROM Bills
WHERE paymentDate <= dueDate;
Bill Analysis - Using Bill_Items Table
1. Calculate the total amount generated
sql
Copy code
SELECT 
    SUM(LineTotal) AS totalRevenue
FROM Bill_Items;
2. Identify the item with the highest LineTotal column
sql
Copy code
SELECT 
    itemID, 
    MAX(LineTotal) AS maxLineTotal
FROM Bill_Items;
3. Which item had the minimum LineTotal column?
sql
Copy code
SELECT 
    itemID, 
    MIN(LineTotal) AS minLineTotal
FROM Bill_Items;
Payment Analysis - Using Payment Table
1. Find the most popular payment method
sql
Copy code
SELECT 
    paymentMethod, 
    COUNT(*) AS paymentCount
FROM Payment
GROUP BY paymentMethod
ORDER BY paymentCount DESC
LIMIT 1;
2. Calculate the total revenue generated by each payment method
sql
Copy code
SELECT 
    paymentMethod, 
    SUM(paymentAmount) AS totalRevenue
FROM Payment
GROUP BY paymentMethod;
3. Determine the average payment amount
sql
Copy code
SELECT 
    AVG(paymentAmount) AS avgPaymentAmount
FROM Payment;
Data Analysis and Insights - Using Bills Table
1. Identify the top 3 categories with the highest total revenue
Assuming the Bills table is linked to a categories table by categoryID:

sql
Copy code
SELECT 
    c.categoryName, 
    SUM(b.totalAmount) AS totalRevenue
FROM Bills b
JOIN categories c ON b.categoryID = c.categoryID
GROUP BY c.categoryName
ORDER BY totalRevenue DESC
LIMIT 3;
2. Find the customer with the highest number of unpaid bills
sql
Copy code
SELECT 
    customerID, 
    COUNT(*) AS unpaidBillCount
FROM Bills
WHERE paymentStatus = 'Unpaid'
GROUP BY customerID
ORDER BY unpaidBillCount DESC
LIMIT 1;
